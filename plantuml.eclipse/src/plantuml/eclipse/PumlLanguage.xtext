grammar plantuml.eclipse.Puml hidden(WS, NEWLINE, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate puml "http://www.eclipse.plantuml/Puml"

// -----------------------------------------------------------------------------------------------
// ----------------------------------------- Root ------------------------------------------------
// -----------------------------------------------------------------------------------------------
UmlDiagram:
	{UmlDiagram}
	('SEQUENCE' umlDiagrams+=SequenceUml) 
	| ('COMPONENT' umlDiagrams+=ComponentUml)
	| ('CLASS' umlDiagrams+=ClassUml);
	
// -----------------------------------------------------------------------------------------------
// ------------------------- Entry Points for different Diagrams ---------------------------------
// -----------------------------------------------------------------------------------------------

// Class diagram
ClassUml:
	{ClassUml}
	'@startuml' umlElements+=(ClassElement)* '@enduml';

// Sequence diagram
SequenceUml:
	{SequenceUml}
	'@startuml' umlElements+=(UmlElement)* '@enduml';

// Component diagram
ComponentUml:
	{ComponentUml}
	'@startuml' umlElements+=(ComponentElement)* '@enduml';
	
	
// -----------------------------------------------------------------------------------------------
// ------------------------------------- Class Diagramm ------------------------------------------
// -----------------------------------------------------------------------------------------------

// Elements of the class diagram
ClassElement:
	Association
	| Class
	| NoteClass
	| Enum
	| TitleClass;

// Class definition
Class:
	{Class}
	(((abstract?='abstract')? 'class') | interface?='interface') (name=ID | name=STRING | longName=STRING 'as' name=ID)
	(color=ColorTag)?
	('extends' superTypes+=[Class|ClassName] (',' superTypes+=[Class|ClassName])*)?
	('implements' interfaces+=[Class|ClassName] (',' interfaces+=[Class|ClassName])*)?
	('{' (classContents+=ClassContent | divider+=DividerClass | advancedBody+=STRING)* '}')?;


// Other possibility to create classes
// TODO: Interferences with other rules
ClassWithContent returns Class:
	name=ClassName ":" classContents+=ClassContent;

TitleClass:
	{TitleClass}
	'title' value+=ID;

// Important contents inside a class
ClassContent:
	Method
	| Attribute;

// Class names
ClassName:
	(ID | STRING);

// Enums
Enum:
	{Enum}
	'enum' name=ID (color=ColorTag)?
	('{' enumConstants+=EnumConstant (',' enumConstants+=EnumConstant)* '}')?;

// Constants in Enums
EnumConstant:
	{EnumConstant}
	name=ID;

// Attributes in classes
Attribute:
	{Attribute}
	(static?='{static}')? (abstract?='{abstract}')?
	((type=ID (array?='[' (length=Int)? ']')? name=ID)
	|((visibility=Visibility)? name=ID (":" type=ID (array?='[' (length=Int)? ']')?)));

// Methods in classes
Method:
	{Method}
	(static?='{static}')? (abstract?='{abstract}')?
	((type=ID (array?='[' (length=Int)? ']')? name=METHID)
	|((visibility=Visibility)? name=METHID (":" type=ID (array?='[' (length=Int)? ']')?)));

// Associations between classes
Association:
	{Association}
	(classLeft=[Class|ClassName]
	infoLeft=STRING?
	=>associationArrow=ARROWTYPE
	infoRight=STRING?
	classRight=[Class|ClassName])
	(':' text+=(ID)*)?;

// Notes for classes
NoteClass:
	{NoteClass}
	'note' ('left' | 'right' | 'top') ('of' noteOf=[Class|ClassName])?
	value+=(ID)*
	'end note';

// Color definitions
ColorTag:
	COLOR | HEXCODE;

// Divider to separate parts of a class
// Problem: ambiguity with association arrow
DividerClass:
	{DividerClass}
	((value+='==' (value+=(ID)* value+='==')?)
	//| (value+='--' (value+=(ID)* value+='--')?)
	| (value+='__' (value+=(ID)* value+='__')?))
;

// Left types of an association
enum AssociationType:
	UNDEFINED
	| BIDIRECTIONAL
	| DIRECTIONALLEFT
	| DIRECTIONALLEFTX
	| DIRECTIONALLEFTO
	| DIRECTIONALRIGHT
	| DIRECTIONALRIGHTX
	| DIRECTIONALRIGHTO
	| INHERITANCELEFT
	| INHERITANCERIGHT
	| AGGREGATIONLEFT
	| AGGREGATIONRIGHT
	| COMPOSITIONLEFT
	| COMPOSITIONRIGHT;


// Visibility for attributes and methods
enum Visibility: 
	PROTECTED='#'
	| PRIVATE='-'
	| DEFAULT='~'
	| PUBLIC='+';


// -----------------------------------------------------------------------------------------------
// ----------------------------------- Sequence Diagramm -----------------------------------------
// -----------------------------------------------------------------------------------------------

UmlElement:
	Participant
	| UseLeft
	| UseRight
	| Skinparam
	| Box
	| Group
	| Activate
	| Alternative
	| Autonumber
	| Legend
	| Title
	| Newpage
	| Note
	| Divider
	| Reference
	| Delay
	| Space
	//| QualifiedName
;


Participant:
	{Participant}
	// TODO das Problem liegt am Konflikt in den Namen --> Daher hat xtext auch bei der ID den ^ als Konfliktvermeider
	// google: xtext keyword contextual
	// https://kthoms.wordpress.com/2012/03/15/xtext-content-assist-escape-identifiers-conflicting-with-keywords/#comments
	//	'participant ' (name=TEXT | longname=(STRING | TEXT) ' as ' name=TEXT) NEWLINE
	//	'participant ' {UmlParticipant} name=(TEXT|STRING) ('as ' name=TEXT)? NEWLINE
	('PARTICIPANT' | 'ACTOR' | 'BOUNDARY' | 'CONTROL' | 'ENTITY' | 'DATABASE') (name=ID | longname=(STRING | ID) 'AS'
	name=ID);

QualifiedName:
	{QualifiedName}
	ID;

	
Space:
	{Space}
	('||' value=ID '||' | '|||');

Delay:
	{Delay}
	'...' value+=(ID)* '...';

Reference:
	{Reference}
	'REF OVER' ref+=[Participant|ID] (',' ref+=[Participant|ID])*
	(':' value+=(ID)* | value+=(ID)* 'END REF');

Divider:
	{Divider}
	'==' name=ID value+=(ID)* '==';

Note:
	{Note}
	'NOTE' ('LEFT' | 'RIGHT' | 'OVER') ('OF' noteOf=[Participant|ID])?
	value+=(ID)*
	'END NOTE';

Newpage:
	{Newpage}
	'NEWPAGE' value+=(ID | STRING)*;

Title:
	{Title}
	'TITLE' value+=(ID | STRING | WS)*;

Legend:
	{Legend}
	'LEGEND'
	legendEntries+=(STRING | ID | '=' | ':')*
	'ENDLEGEND';

LegendEntries:
	name=ID '=' value+=(ID | STRING)*;

Autonumber:
	{Autonumber}
	'AUTONUMBER' (value=(ID | STRING))?;

Activate returns UmlElementsContainer:
	{Activate}
	'ACTIVATE' activate=[Participant]
	umlElements+=(UmlElement)*
	('DEACTIVATE' | 'DESTROY') deactivate=[Participant];

Alternative returns UmlElementsContainer:
	{Alternative}
	'ALT' text+=(ID)*
	umlElements+=(UmlElement)*
	elseBlocks+=(Else)*
	=> 'END';

Else returns UmlElementsContainer:
	{Else}
	'ELSE' text+=(ID)*
	umlElements+=(UmlElement)*;

Group returns UmlElementsContainer:
	{Group}
	('GROUP' | 'OPT' | 'LOOP' | 'PAR' | 'BREAK' | 'CRITICAL') test+=(ID)*
	umlElements+=(UmlElement)*
	=> 'END';

Box returns UmlElementsContainer:
	{Box}
	'BOX' name=STRING (color=HEXCODE)?
	umlElements+=(UmlElement)*
	=> 'END BOX';

Skinparam:
	{Skinparam}
	'SKINPARAM SEQUENCE{'
	skinElements+=(SkinElement)*
	'}';

SkinElement:
	name=ID value=(ID | HEXCODE);

UseLeft returns UmlUse:
	{UseLeft}
	(userOne=[Participant|ID] | '[')
	associationArrow=ARROWTYPE
	// ('o<-' | '<-o' | 'o<-o' | '<-' | 'o<--' | '<--o' | 'o<--o' | '<--' | 'x<-' | '<-x' | 'x<-x' | 'x<--' | '<--x' | 'x<--x')
	userTwo=[Participant|ID] (':' text+=(ID)*)?;

UseRight returns UmlUse:
	{UseRight}
	(userOne=[Participant|ID])
	associationArrow=ARROWTYPE
	//('o->' | '->o' | 'o->o' | '->' | 'o-->' | '-->o' | 'o-->o' | '-->' | 'x->' | '->x' | 'x->x' | 'x-->' | '-->x' | 'x-->x')
	(userTwo=[Participant|ID] | ']') (':' text+=(ID)*)?;

UmlElementsContainer:
	{UmlElementsContainer}
	umlElements+=(UmlElement)*;

NamedElement:
	{NamedElement}
	name=ID;

UmlUse:
	{UmlUse};

// -----------------------------------------------------------------------------------------------
// ----------------------------------- Component Diagram -----------------------------------------
// -----------------------------------------------------------------------------------------------

ComponentElement:
	Component
	| Interface
	| Link
	| Title;
	
Link:
	linkOne=[NamedElement|ID] 
	/**
	 * Long list of possible clauses due to misunderstanding within the parser.
	 * If you would split the detection into multiple ones this is not be detected in the right way.
	 * Example: 
	 * 		('<-' | '-') (d)? ('-' | '->')
	 * does not work because if the parser is already in ID detection due to previous (':' text+=(ID)*)?
	 * it is not possible to detect the upper clause for sure.
	 */
	associationArrow=ARROWTYPE
	linkTwo=[NamedElement|ID] (':' text+=(ID)*)?;

Interface returns NamedElement:
	{Interface} ('(' name=ID nameExtension+=(ID)* ')' | 'INTERFACE' description=STRING) ('AS' name=ID)? (color=ColorTag)?;

Component returns NamedElement:
	{Component} ('[' name=ID nameExtension+=(ID | WS)* ']' | 'COMPONENT' description=STRING) ('AS' name=ID)? (color=ColorTag)?;

// -----------------------------------------------------------------------------------------------
// ------------------------------- Shared Rules and Terminals ------------------------------------
// -----------------------------------------------------------------------------------------------

terminal ARROWTYPE returns AssociationType:
	('<' | '-' | '.' | 'o' | 'x' | '*')
	('<' | '>' | '-' | '.' | 'o' | 'x' | '*' | '|' | 'l' | 'r' | 'u' | 'd'
	| '[#' ( 'a'..'z' | 'A'..'Z' | '0'..'9' )+ ']'
	)*;


// Colors as words for PlantUML
// Source: https://github.com/EricssonPlant/plantuml-xtext-light/
terminal COLOR:
	"#" ('AliceBlue'|'AntiqueWhite'|'Aqua'|'Aquamarine'|'Azure'|'Beige'|'Bisque'|'Black'|'BlanchedAlmond'
	|'Blue'|'BlueViolet'|'Brown'|'BurlyWood'|'CadetBlue'|'Chartreuse'|'Chocolate'|'Coral'
	|'CornflowerBlue'|'Cornsilk'|'Crimson'|'Cyan'|'DarkBlue'|'DarkCyan'|'DarkGoldenRod'|'DarkGray'
	|'DarkGreen'|'DarkGrey'|'DarkKhaki'|'DarkMagenta'|'DarkOliveGreen'|'DarkOrchid'|'DarkRed'
	|'DarkSalmo'|'DarkSeaGreen'|'DarkSlateBlue'|'DarkSlateGray'|'DarkSlateGrey'|'DarkTurquoise'
	|'DarkViolet'|'Darkorange'|'DeepPink'|'DeepSkyBlue'|'DimGray'|'DimGrey'|'DodgerBlue'
	|'FireBrick'|'FloralWhite'|'ForestGreen'|'Fuchsia'|'Gainsboro'|'GhostWhite'|'Gold'
	|'GoldenRod'|'Gray'|'Green'|'GreenYellow'|'Grey'|'HoneyDew'|'HotPink'|'IndianRed'
	|'Indigo'|'Ivory'|'Khaki'|'Lavender'|'LavenderBlush'|'LawnGreen'|'LemonChiffon'
	|'LightBlue'|'LightCoral'|'LightCyan'|'LightGoldenRodYellow'|'LightGray'|'LightGreen'
	|'LightGrey'|'LightPink'|'LightSalmon'|'LightSeaGreen'|'LightSkyBlue'|'LightSlateGray'
	|'LightSlateGrey'|'LightSteelBlue'|'LightYellow'|'Lime'|'LimeGreen'|'Linen'|'Magenta'
	|'Maroon'|'MediumAquaMarine'|'MediumBlue'|'MediumOrchid'|'MediumPurple'|'MediumSeaGreen'
	|'MediumSlateBlue'|'MediumSpringGreen'|'MediumTurquoise'|'MediumVioletRed'
	|'MidnightBlue'|'MintCream'|'MistyRose'|'Moccasin'|'NavajoWhite'|'Navy'|'OldLace'
	|'Olive'|'OliveDrab'|'OrangeRed'|'Orchid'|'PaleGoldenRod'|'PaleGreen'
	|'PaleTurquoise'|'PaleVioletRed'|'PapayaWhip'|'PeachPuff'|'Peru'|'Pink'|'Plum'
	|'PowderBlue'|'Purple'|'Red'|'RosyBrown'|'RoyalBlue'|'SaddleBrown'
	|'Salmon'|'SandyBrown'|'SeaGreen'|'Sienna'|'Silver'|'SkyBlue'|'SlateBlue'
	|'SlateGray'|'SlateGrey'|'Snow'|'SpringGreen'|'SteelBlue'|'Tan'|'Teal'|'Thistle'
	|'Tomato'|'Turquoise'|'Violet'|'Wheat'|'White'|'WhiteSmoke'|'Yellow'|'YellowGreen');

// Hexadecimal colors
terminal HEXCODE:
	"#"
	('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')
	('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9')('A' .. 'F'|'0' .. '9');

// Terminal to detect methods
terminal METHID:
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9') 
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	"("
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*
	")";

// Integer
Int returns ecore::EInt:
	NUMBER;

// Number
terminal NUMBER:
	'0'..'9'+;

// String
terminal STRING:
	'"' ('\\' . | !('\\' | '"'))* '"';
	
Arrow:
	type=ARROWTYPE;

// Tab
terminal WS:
	' ' | '\t';

// Newline
terminal NEWLINE:
	'\r'? '\n';

// ID
terminal ID:
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '\"\"' | '//' | '\\' | '*' | '?')
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '\"\"' | '//' | '\\' | ':' | '*' | '?')*;

// Single line comment
terminal SL_COMMENT:
	"'" !('\n' | '\r')* ('\r'? '\n')?;

// TODO: Does not work
// Multiline comments
terminal ML_COMMENT:
	"//'" ('\r'? '\n')* "'//" ;