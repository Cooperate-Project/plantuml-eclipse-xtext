/*
* generated by Xtext
*/
package plantuml.eclipse.ui.outline

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import plantuml.eclipse.puml.Alternative
import plantuml.eclipse.puml.Participant
import plantuml.eclipse.puml.UmlDiagram
import plantuml.eclipse.puml.UmlElementsContainer
import plantuml.eclipse.puml.UmlUse
import plantuml.eclipse.puml.SequenceUml
import plantuml.eclipse.puml.ClassConnection
import plantuml.eclipse.puml.Class
import plantuml.eclipse.puml.Attribute

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class PumlOutlineTreeProvider extends DefaultOutlineTreeProvider {

	/*Integer UmlUseCounter = 0;
	//VirtualOutlineNode messagesGroup = null;
	//VirtualOutlineNode participantGroup = null;
	//VirtualOutlineNode classGroup = null;
	//VirtualOutlineNode AttributesGroup = null;
	//VirtualOutlineNode classConnectionGroup = null;

	def _createChildren(DocumentRootNode parentNode, UmlDiagram domainModel) {
		UmlUseCounter = 0;
		//classGroup = new VirtualOutlineNode(parentNode, null, "Classes", false);
		//AttributesGroup = new VirtualOutlineNode(parentNode, null, "Class Attributes", false);
		//classConnectionGroup = new VirtualOutlineNode(parentNode, null, "Class Connections", false);
		// Loop through Elements of Domain Model
		for (EObject element : domainModel.umlDiagrams) {
			// Could check for Instance -> element instanceof SequenceUml
			createNode(parentNode, element);
		}
	}

	override _createNode(IOutlineNode parentNode, EObject modelElement) {
		
	}

	def _text(UmlUse element) {
		return UmlUseCounter.toString() + ": " + element.text;
	}
	
	def _text(Class element){
		return "Name: " + element.name;
	}*/
}
