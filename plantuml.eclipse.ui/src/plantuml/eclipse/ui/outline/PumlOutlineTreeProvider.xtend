/*
* generated by Xtext
*/
package plantuml.eclipse.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.eclipse.emf.ecore.EObject
import plantuml.eclipse.puml.Class
import plantuml.eclipse.puml.Enum
import plantuml.eclipse.puml.UmlDiagram
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode
import plantuml.eclipse.puml.ClassUml
import com.google.inject.Inject
import org.eclipse.xtext.ui.IImageHelper
import plantuml.eclipse.puml.Association
import plantuml.eclipse.puml.PumlFactory
import plantuml.eclipse.puml.AssociationType

/**
 * Customization of the default outline structure.
 */
class PumlOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Inject
    private IImageHelper imageHelper;

	// Parent Nodes
	AbstractOutlineNode classesParent;
	AbstractOutlineNode interfacesParent;
	AbstractOutlineNode enumsParent;
	AbstractOutlineNode associationsParent;
	
	/**
	 * Loops through elements and creates our outline tree.
	 */
	def _createChildren(DocumentRootNode parentNode, UmlDiagram root) {
		for(EObject umlDiagram : root.umlDiagrams){
			// Contents of PlantUML Class Diagram
			if(umlDiagram instanceof ClassUml){
				// Create Root Nodes for Elements
				classesParent = new AbstractOutlineNode(parentNode, imageHelper.getImage("class_obj.png"), "Classes", false){}
				interfacesParent = new AbstractOutlineNode(parentNode, imageHelper.getImage("int_obj.png"), "Interfaces", false){}
				enumsParent = new AbstractOutlineNode(parentNode, imageHelper.getImage("enum_obj.png"), "Enums", false){}
				associationsParent = new AbstractOutlineNode(parentNode, imageHelper.getImage("reference.png"), "Assocations", false){}
				// Loop through Class Elements
				for(EObject umlClassElement : umlDiagram.umlElements){
					if(umlClassElement instanceof Class){
						// Do we have extended Supertypes?
						if(umlClassElement.superTypes.length() != 0){
							for(extendedClass : umlClassElement.superTypes){
								createNode(associationsParent, createAssociation(umlClassElement, extendedClass, AssociationType.INHERITANCERIGHT))
							}
						}
						// Do we have implemented Interfaces?
						if(umlClassElement.interfaces.length() != 0){
							for(implementedClass : umlClassElement.interfaces){
								createNode(associationsParent, createAssociation(umlClassElement, implementedClass, AssociationType.INHERITANCERIGHT))
							}
						}
						if(umlClassElement.interface){
							createNode(interfacesParent, umlClassElement)
						}else{
							createNode(classesParent, umlClassElement)
						}
					}
					if(umlClassElement instanceof Enum){
						createNode(enumsParent, umlClassElement)
					}
					if(umlClassElement instanceof Association){
						createNode(associationsParent, umlClassElement)
					}
				}
			}
		}
	}


	/**
	 * Creates a new Association EObject and returns it.
	 */
	def Association createAssociation(Class classLeft, Class classRight, AssociationType type){
		var newAssociation = PumlFactory.eINSTANCE.createAssociation()
		newAssociation.classLeft = classLeft
		newAssociation.classRight = classRight
		newAssociation.associationArrow = type
		return newAssociation
	}
}
