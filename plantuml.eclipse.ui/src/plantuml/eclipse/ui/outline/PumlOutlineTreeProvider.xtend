/*
* generated by Xtext
*/
package plantuml.eclipse.ui.outline

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import plantuml.eclipse.puml.Alternative
import plantuml.eclipse.puml.Participant
import plantuml.eclipse.puml.UmlDiagram
import plantuml.eclipse.puml.UmlElementsContainer
import plantuml.eclipse.puml.UmlUse
import plantuml.eclipse.puml.SequenceUml

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class PumlOutlineTreeProvider extends DefaultOutlineTreeProvider {

	Integer UmlUseCounter = 0;
	VirtualOutlineNode messagesGroup = null;
	VirtualOutlineNode participantGroup = null;

	def _createChildren(DocumentRootNode parentNode, UmlDiagram domainModel) {
		UmlUseCounter = 0;
		for (EObject element : domainModel.umlDiagrams) {

			//			for(UmlElement ele : element.umlElements) {
			//				if(ele instanceof UseRight) {
			if (element instanceof SequenceUml) {
				createNode(parentNode, element);

			} else {
				createNode(parentNode, element);
			}

		//				}
		//			}
		}

	}

	//
	//	override _createChildren(IOutlineNode parentNode, EObject modelElement) {
	//		for (EObject childElement : modelElement.eContents()) {
	//
	//			//			if(childElement instanceof UseRight) {
	//			//				createNode(parentNode, childElement);
	//			//			}
	//			createNode(parentNode, childElement);
	//		}
	//	}
	override _createNode(IOutlineNode parentNode, EObject modelElement) {
		if (null == messagesGroup) {
			messagesGroup = new VirtualOutlineNode(parentNode, null, "Messages", false);
		}
		if (null == participantGroup) {
			participantGroup = new VirtualOutlineNode(parentNode, null, "Participants", false);
		}
		if (modelElement instanceof UmlUse) {
			UmlUseCounter++;
			super._createNode(messagesGroup, modelElement);
		} else if (modelElement instanceof UmlElementsContainer) {
			for (EObject ele : (modelElement as UmlElementsContainer).umlElements) {
				this._createNode(parentNode, ele);
			}
			if (modelElement instanceof Alternative) {
				for (EObject ele : (modelElement as Alternative).elseBlocks) {
					this._createNode(parentNode, ele);
				}
			}

		} else if (modelElement instanceof Participant) {
			super._createNode(participantGroup, modelElement);
		}
	}

	def _text(UmlUse element) {
		return UmlUseCounter.toString() + ": " + element.text;
	}
}
