/*
* generated by Xtext
*/
package plantuml.eclipse.ui.labeling

import com.google.inject.Inject

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.jface.viewers.StyledString
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.ui.labeling.XbaseImages2
import org.eclipse.jdt.ui.JavaElementImageDescriptor;

import plantuml.eclipse.puml.Association
import plantuml.eclipse.puml.AssociationArrow
import plantuml.eclipse.puml.AssociationTypeLeft
import plantuml.eclipse.puml.AssociationTypeRight
import plantuml.eclipse.puml.Attribute
import plantuml.eclipse.puml.Class
import plantuml.eclipse.puml.ClassUml
import plantuml.eclipse.puml.Enum
import plantuml.eclipse.puml.EnumConstant
import plantuml.eclipse.puml.Method
import plantuml.eclipse.puml.Visibility

/**
 * Provides labels for a EObjects.
 * TODO: Multiple icons per entry to display something is static or abstract.
 */
class PumlLabelProvider extends DefaultEObjectLabelProvider {

	@Inject private IImageHelper imageHelper
	@Inject private XbaseImages2 images
    
    private StringBuffer label
    private AssociationArrow arrow  

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	// -------------------------------------------------------------------------------------------
	// ---------------------------------------- Texts --------------------------------------------
	// -------------------------------------------------------------------------------------------

	/**
	 * Returns the label text for the PlantUML-Class-Group
	 */
	def text(ClassUml classUml) {
		"Class Diagram"
	}
	
	/**
	 * Returns the label text for Enums.
	 */
	def text(Enum someEnum){
		return " " + someEnum.name
	}
	
	/**
	 * Returns the label text for enum constants.
	 */
	def text(EnumConstant enumConstant){
		return " " + enumConstant.name
	}
	
	
	/**
	 * Returns the label text for connections.
	 */
	 def text(Association association){
		label = new StringBuffer()
		label.append(association.classLeft.name + " ");
		// Which association do we have?
		arrow = association.associationArrow;
		if(arrow.leftType != AssociationTypeLeft.UNDEFINED){
			label.append(arrow.leftType)
		}
		if(arrow.rightType != AssociationTypeRight.UNDEFINED){
			label.append(arrow.rightType)
		}
		label.append(" " + association.classRight.name);
		if(association.text.length != 0){
			label.append(" : ")
			for(String text : association.text){
				label.append(text)
			}
		}
		return label.toString()
	 }

	/**
	 * Returns the label text for classes.
	 */
	def text(Class someClass) {
		label = new StringBuffer()
		label.append(" " + someClass.getName())
		return label.toString()
	}
		
	/**
	 * Returns the label text for attributes.
	 */
	def text(Attribute attribute){
		var styledLabel = new StyledString()
		styledLabel.append(" " + attribute.getName())
		label = new StringBuffer();
		if(attribute.type != null){
			label.append(" : " + attribute.type)
			if(attribute.array){
				label.append("[")
				if(attribute.length > 0){
					label.append(attribute.length)
				}
				label.append("]")
			}
		}
		styledLabel.append(new StyledString(label.toString(), StyledString::DECORATIONS_STYLER))
		return styledLabel
	}
	
	/**
	 * Returns the label text for methods.
	 */
	def text(Method method){
		var styledLabel = new StyledString()
		styledLabel.append(" " + method.getName())
		label = new StringBuffer()
		if(method.type != null){
			label.append(" : " + method.type)
			if(method.array){
				label.append("[")
				if(method.length >= 0){
					label.append(method.length)
				}
				label.append("]")
			}
		}
		styledLabel.append(new StyledString(label.toString(), StyledString::DECORATIONS_STYLER))
		return styledLabel
	}
	
	// -------------------------------------------------------------------------------------------
	// ---------------------------------------- Icons --------------------------------------------
	// -------------------------------------------------------------------------------------------
	
	/**
	 * Returns the image for the PlantUML-Class-Group.
	 */
	def image(ClassUml classUml){
		imageHelper.getImage("java_model_obj.png")
	}
	
	/**
	 * Returns the images for attributes.
	 */
	def image(Attribute attribute){
		if(attribute.visibility == Visibility.PROTECTED){
			images.forField(JvmVisibility.PROTECTED, getAdornments(attribute))
		}else if(attribute.visibility == Visibility.PRIVATE){
			images.forField(JvmVisibility.PRIVATE, getAdornments(attribute))
		}else if(attribute.visibility == Visibility.PUBLIC){
			images.forField(JvmVisibility.PUBLIC, getAdornments(attribute))
		}else if(attribute.visibility == Visibility.DEFAULT){
			images.forField(JvmVisibility.DEFAULT, getAdornments(attribute))
		}
	}
	
	/**
	 * Returns the image f√ºr enum constants.
	 */
	 def image(EnumConstant enumConstant){
	 	images.forField(JvmVisibility.PUBLIC, getAdornments(enumConstant))
	 }
	
	/**
	 * Returns the images for methods.
	 */
	def image(Method method){
		if(method.visibility == Visibility.PROTECTED){
			images.forOperation(JvmVisibility.PROTECTED, getAdornments(method))
		}else if(method.visibility == Visibility.PRIVATE){
			images.forOperation(JvmVisibility.PRIVATE, getAdornments(method))
		}else if(method.visibility == Visibility.PUBLIC){
			images.forOperation(JvmVisibility.PUBLIC, getAdornments(method))
		}else if(method.visibility == Visibility.DEFAULT){
			images.forOperation(JvmVisibility.DEFAULT, getAdornments(method))
		}
	}
	
	/**
	 * Returns the image for enums.
	 */
	def image(Enum someEnum){
		images.forEnum(JvmVisibility.PUBLIC, getAdornments(someEnum))
	}
	
	/**
	 * Returns the images for classes.
	 */
	def image(Class someClass){
		if(someClass.interface){
			images.forInterface(JvmVisibility.PUBLIC, getAdornments(someClass))
		}else{
			images.forClass(JvmVisibility.PUBLIC, getAdornments(someClass))
		}
	}
	
	// -------------------------------------------------------------------------------------------
	// ---------------------------------------- Helper -------------------------------------------
	// -------------------------------------------------------------------------------------------

	/**
	 * Returns adornment for decoraters.
	 */
	def private int getAdornments(Object obj){
		var adornment = 0
		if(obj instanceof Attribute){
			if(obj.static){
				adornment += JavaElementImageDescriptor.STATIC
			}
			if(obj.abstract){
				adornment += JavaElementImageDescriptor.ABSTRACT
			}
		}
		if(obj instanceof Method){
			if(obj.static){
				adornment += JavaElementImageDescriptor.STATIC
			}
			if(obj.abstract){
				adornment += JavaElementImageDescriptor.ABSTRACT
			}
		}
		if(obj instanceof Class){
			if(obj.abstract){
				adornment += JavaElementImageDescriptor.ABSTRACT
			}
		}
		if(obj instanceof EnumConstant){
			adornment += JavaElementImageDescriptor.FINAL
			adornment += JavaElementImageDescriptor.STATIC
		}
		if(obj instanceof Enum){
			adornment += JavaElementImageDescriptor.FINAL
			adornment += JavaElementImageDescriptor.STATIC
		}
		return adornment
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
