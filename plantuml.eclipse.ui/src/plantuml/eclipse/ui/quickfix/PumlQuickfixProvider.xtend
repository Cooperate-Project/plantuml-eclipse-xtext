/*
* generated by Xtext
*/
package plantuml.eclipse.ui.quickfix

import plantuml.eclipse.validation.PumlValidator
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import plantuml.eclipse.puml.ClassUml
import plantuml.eclipse.puml.ClassElement
import org.eclipse.xtext.EcoreUtil2
import plantuml.eclipse.puml.PumlFactory
import org.eclipse.xtext.diagnostics.Diagnostic
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider

/**
 * Custom quickfixes.
 *
 */
class PumlQuickfixProvider extends DefaultQuickfixProvider {

	/**
	 * Remove super type if a cycle is detected.
	 */
	 @Fix(PumlValidator::HIERARCHY_CYCLE)
	 def removeSuperTypes(Issue issue, IssueResolutionAcceptor acceptor){
	 	
	 	acceptor.accept(issue,
	 		"Remove supertype from this class",
	 		"Remove supertype '" + issue.data.get(0) + "'",
	 		"rem_co.gif",
	 		[
				context |
				val xtextDocument = context.xtextDocument
				val textBeforeSuperType = xtextDocument.get(issue.offset - 8, 7)
				if(textBeforeSuperType.equals("extends")){
					xtextDocument.replace(issue.offset -8, issue.length+8, "")
				}else{
					xtextDocument.replace(issue.offset -2, issue.length, "")
				}
	 		]
	 	)
	 }

	/**
	 * Capitalize all chars of an enum constant name.
	 */
	@Fix(PumlValidator::INVALID_ENUM_CONSTANT_NAME)
	def capitalizeEnumConstantName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Capitalize enum constant name",
			"Capitalize name of '" + issue.data.get(0) + "'",
			"enum_obj.png",
			[
				context |
				val xtextDocument = context.xtextDocument
				val name = xtextDocument.get(issue.offset, issue.length)
				xtextDocument.replace(issue.offset, issue.length, name.toUpperCase)
			]
		)
	}
	
	/**
	 * Capitalize first letter of a class name.
	 */
	@Fix(PumlValidator::INVALID_CLASS_NAME)
	def capitalizeFirstLetterClassName(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Capitalize class name",
			"Capitalize name of '" + issue.data.get(0) + "'",
			"class_obj.png",
			[
				context |
				val xtextDocument = context.xtextDocument
				val firstLetter = xtextDocument.get(issue.offset, 1)
				xtextDocument.replace(issue.offset, 1, firstLetter.toFirstUpper)
			]
		)
	}
	
	/**
	 * Create missing class for a cross reference.
	 * TODO: Currently messes up formating of code.
	 */
	@Fix(Diagnostic::LINKING_DIAGNOSTIC)
	def createMissingClass(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Create missing class",
			"Create missing class",
			"class_obj.png",
			[
				element, context |
				val currentClass = EcoreUtil2.getContainerOfType(element, ClassElement)
				val model = currentClass.eContainer as ClassUml
				model.umlElements.add(
					model.umlElements.indexOf(currentClass)+1,
					PumlFactory::eINSTANCE.createClassifier() => [
						name = context.xtextDocument.get(issue.offset, issue.length)
					]
				)
			]
		)
	}
	
	/**
	 * Suggest quickfixes for allowed associations if an arrow type from a different uml diagram type was detected.
	 */
	@Fix(PumlValidator::WRONG_ASSOCIATION_FOR_DIAGRAMTYPE)
	def changeArrowType(Issue issue, IssueResolutionAcceptor acceptor){
		val proposals = #[
				"implements" -> ("implm_co.png" -> "..|>"),
				"extends" -> ("over_co.png" -> "--|>"),
				"aggregates" -> ("aggr_co.png" -> "--o"),
				"composites" -> ("comp_co.png" -> "--*"),
				"references" -> ("ref_co.png" -> "-->")
		]
		for(proposal : proposals){
			acceptor.accept(issue,
				"Change arrow type to \'" + proposal.key + "\'",
				"Change arrow type to \'" + proposal.key + "\'",
				proposal.value.key,
				[
					context |
					val xtextDocument = context.xtextDocument
					xtextDocument.replace(issue.offset, issue.length, proposal.value.value)
				]
			)
		}
	}
	
	
	
	
	
	
	
	
	
}
