transformation PUML_to_UML(in pumlModel : PUML, out umlModel : UML, in ecorePrimitiveTypes : UML);

modeltype PUML uses puml('http://www.eclipse.plantuml/Puml');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

property existingClasses : Set(String);
property existingTypes : Set(String);

main() {
	var diagrams := pumlModel.rootObjects()[puml::UmlDiagram];
	var classDiagrams := diagrams.umlDiagrams->selectByType(puml::ClassUml);
	
	classDiagrams->map diagramToDiagram();
}

mapping puml::ClassUml::diagramToDiagram() : uml::Model {
	var title := self.umlElements->any(oclIsTypeOf(puml::UmlClassTitle)).oclAsType(puml::UmlClassTitle);
	if (title <> null) {
		name := title.name;
	} else {
		name := "model";
	};
	
	packagedElement += self.umlElements->selectByKind(puml::Classifier)->map classifierToClassifier();
	packagedElement += self.umlElements->selectByKind(puml::Enum)->map enumToEnum();
	packagedElement += self.umlElements->selectByKind(puml::Association)->map associationToAssociation();
	self.umlElements->selectByKind(puml::Classifier)->forEach(classifier) {
		classifier.inheritance.map inheritanceToRealizations(classifier.resolveone(uml::Classifier))->forEach(realization) {
			packagedElement += realization;			
		}
	};

	var typesToGenerate : Set(String);
	existingTypes->forEach(i | existingClasses->excludes(i)) {
		typesToGenerate += i;
	};
	packagedElement += typesToGenerate.map stringToClassifier();
}

//Classifier
mapping puml::Classifier::classifierToClassifier() : uml::Classifier
disjuncts puml::ClassDef::classToClass, puml::InterfaceDef::interfaceToInterface {
}

mapping puml::ClassDef::classToClass() : uml::Class{
	name := self.name;
	existingClasses += self.name;
	ownedAttribute += self.contents->selectByType(puml::Attribute)->map attributeToAttribute();
	ownedOperation += self.contents->selectByType(puml::Method)->map methodToOperation();
	generalization := self.inheritance.map inheritanceToGeneralizations();
}

mapping puml::InterfaceDef::interfaceToInterface() : uml::Interface {
	name := self.name;
	existingClasses += self.name;
	ownedAttribute += self.contents->selectByType(puml::Attribute)->map attributeToAttribute();
	ownedOperation += self.contents->selectByType(puml::Method)->map methodToOperation();
	generalization := self.inheritance.map inheritanceToGeneralizations();
}


// Attribute
mapping puml::Attribute::attributeToAttribute() : uml::Property {
	name := self.name;
	isStatic := self._static;
	visibility := self.visibility.convertVisibility();
	//typeBlock
	type := self.type.getPrimitiveType();
	if (type = null and (self.type <> "" and self.type <> null)) {
		existingTypes += self.type;
		type := late resolveone(c : uml::Classifier | c.name = self.type)
	};
}

//Method
mapping puml::Method::methodToOperation() : uml::Operation {
	name := self.name;
	if (self.type <> "") {
		ownedParameter += self.map returnTypeToReturnParam();
	};
	ownedParameter += self.parameters.map attributeToParameter();
	isStatic := self._static;
	isAbstract := self._abstract;
	visibility := self.visibility.convertVisibility();
}

mapping puml::Method::returnTypeToReturnParam() : uml::Parameter {
	direction := uml::ParameterDirectionKind::_return;
	//typeBlock
	type := self.type.getPrimitiveType();
	if (type = null and (self.type <> "" and self.type <> null)) {
		existingTypes += self.type;
		type := late resolveone(c : uml::Classifier | c.name = self.type)
	}
}

mapping puml::Attribute::attributeToParameter() : uml::Parameter {
	direction := uml::ParameterDirectionKind::_in;
	name := self.name;
	//typeBlock
	type := self.type.getPrimitiveType();
	if (type = null and (self.type <> "" and self.type <> null)) {
		existingTypes += self.type;
		type := late resolveone(c : uml::Classifier | c.name = self.type)
	}
}

//Creates Types derived from Attributes, Methods or Parameters
mapping String::stringToClassifier() : uml::Class {
	name := self;
	var model := resolveone(uml::Model);
	model.packagedElement += result;
}

//Generalizations
mapping puml::Inheritance::inheritanceToGeneralizations() : Sequence(uml::Generalization) {
	init {
		result := self.superTypes->classifierToGeneralization()
	}
}

helper puml::Classifier::classifierToGeneralization() : uml::Generalization {
	var generalization := object uml::Generalization {
		general := self.late resolveone(uml::Classifier)
	};
	return generalization;
}

//Realizations
mapping puml::Inheritance::inheritanceToRealizations(classifier : uml::Classifier) : Sequence(uml::Realization) {
	init {
		result := self.implementedInterfaces->classifierToRealization(classifier)
	}
}

helper puml::Classifier::classifierToRealization(classifier : uml::Classifier) : uml::Realization {
	var realization := object uml::Realization {
		client := classifier;
		supplier := self.late resolveone(uml::Classifier);
	};
	return realization;
}

//Enum
mapping puml::Enum::enumToEnum() : uml::Enumeration {
	name := self.name;
	ownedLiteral += self.enumConstants->map enumConstantToEnumLiteral();
}

mapping puml::EnumConstant::enumConstantToEnumLiteral() : uml::EnumerationLiteral {
	name := self.name;
}

//Association
mapping puml::Association::associationToAssociation() : uml::Association {
	name := self.label;
	var isLeftDirected := self.associationArrow.isLeftDirected();
	var isRightDirected := self.associationArrow.isRightDirected();
	var leftProp := self.map associationToLeftProperty(isLeftDirected, self.associationArrow.getLeftPropertyAggregationKind());
	var rightProp := self.map associationToRightProperty(isRightDirected, self.associationArrow.getRightPropertyAggregationKind());
	memberEnd += leftProp;
	memberEnd += rightProp;
	
	if (isLeftDirected) {
		self.classRight.resolveone(uml::Class).ownedAttribute += leftProp;
	} else {
		result.ownedEnd += leftProp;
	};
	if (isRightDirected) {
		self.classLeft.resolveone(uml::Class).ownedAttribute += rightProp;
	} else {
		result.ownedEnd += rightProp;
	}
}

mapping puml::Association::associationToLeftProperty(directed : Boolean, aggregationKind : uml::AggregationKind) : uml::Property {
	type := self.classLeft.late resolveone(uml::Classifier);
	result.association := association.resolveone(uml::Association);
	aggregation := aggregationKind;
}

mapping puml::Association::associationToRightProperty(directed : Boolean, aggregationKind : uml::AggregationKind) : uml::Property {
	type := self.classRight.late resolveone(uml::Classifier);
	result.association := association.resolveone(uml::Association);
	aggregation := aggregationKind;
}


//Helper
query puml::Visibility::convertVisibility() : uml::VisibilityKind {
	switch {
		case (self = puml::Visibility::PROTECTED) {return uml::VisibilityKind::protected}
		case (self = puml::Visibility::PRIVATE) {return uml::VisibilityKind::private}
		case (self = puml::Visibility::DEFAULT) {return uml::VisibilityKind::package}
		case (self = puml::Visibility::PUBLIC) {return uml::VisibilityKind::public}
	};
	assert error (false) with log('Could not convert visibility type.', self);
	return null;
}

query puml::AssociationType::isLeftDirected() : Boolean {
	var leftDirection : Set(puml::AssociationType);
	leftDirection+= puml::AssociationType::BIDIRECTIONAL;
	leftDirection+= puml::AssociationType::DIRECTIONALLEFT;

	return (leftDirection->includes(self))
}

query puml::AssociationType::isRightDirected() : Boolean {
	var rightDirection : Set(puml::AssociationType);
	rightDirection+= puml::AssociationType::BIDIRECTIONAL;
	rightDirection+= puml::AssociationType::DIRECTIONALRIGHT;

	return (rightDirection->includes(self))
}

query puml::AssociationType::getRightPropertyAggregationKind() : uml::AggregationKind {
	if (self = puml::AssociationType::AGGREGATIONLEFT) {
		return uml::AggregationKind::shared
	} else if (self = puml::AssociationType::COMPOSITIONLEFT) {
		return uml::AggregationKind::composite
	};
	return uml::AggregationKind::none
}

query puml::AssociationType::getLeftPropertyAggregationKind() : uml::AggregationKind {
	if (self = puml::AssociationType::AGGREGATIONRIGHT) {
		return uml::AggregationKind::shared
	} else if (self = puml::AssociationType::COMPOSITIONRIGHT) {
		return uml::AggregationKind::composite
	};
	return uml::AggregationKind::none
}


query String::getPrimitiveType() : uml::PrimitiveType {
	var searchString = "E".concat(self).toLower();
	var model := ecorePrimitiveTypes.rootObjects()[uml::Model]->any(true);
	var types := model.ownedElement->selectByType(uml::PrimitiveType);
	var type := types->any(searchString = name.toString().toLower());
	return type;
}